はい。じゃあ、えっと、今日は
動的計画法について話していきたいと思います。と、まず え。まあ、前回の勉強会でも動的計画法についてはえ、
軽く話したので、まあね、なんとなく知ってる かなとは思うんですが、まあえ、最初の方からやっていきたいなと思います。で、えっと、最初に話しておきたいのがど的計画法
っていうのが、アルゴリズム名じゃないっていうことについて話したいなと思います。っていうのもと、今までやった累積はとかビット全探索っていうのは あれはね、
アルゴリズムの名前だったんで、なんか問題があった時に、この問題はえ、累積はを使えば解けるよとか、
ビット全探索を使えば解けるよ っていうのがあった時に、え、何を使うかっていうのもかなり明確だと思うんですけど、
え、この問題はどうやって計画を使えば解けるよみたいなのがあった時に、じゃあ、実際どんなアルゴリズムを解くのかっていうのは、それはね、また え、問題によって変わってくるんですね。っていうのも と、
その累積はとか、ビット前探索とか2分探索っていうのはあれはね。アルゴリズム名なんですけど、
え、動的計画法っていうのは、アルゴリズムの名前ではなくて、あれはカテゴリの名前なので、 その動的計画法っていうくくりの中にまたいろんなねえ、アルゴリズムが存在してるっていう形になります。
はい で、そのアルゴリズムが色々ある中で、まある特徴を持ったアルゴリズムたちをまとめて、統的計画法と呼んでるっていうわけですね。
じゃあ、どんなえ特徴持ってるのかっていう話なんですけど、ま、それについては、 え、とりあえずまあまた後で話していきたいと思います。ちょっとまあ本題からずれるんですが、とちょっとね。 
まあ、この問題についてえ、考えたい問題があって、まあ、フィボナッチ数列っていうのはわかりますかねえ、初高がで
え、次の項がにも1でえ、次の項は前の子2つを足した1、足す12で で1足で3でいた3で5でみたいな形になってるスルのことなんですけど、
と、これの第nコを求める関数を作ってください。っていう問題があったとしたら、え、どうしますか。っていう話で
でま、これはねと。まあ、モの定義自体はそんな難しくないので、えま 割と簡単に解けるんじゃないかなと思います。
でま、実際にじゃあ作っていきたいんですが、まあ、ちょっと簡単なために関数目はf でま引き数はまあnとかにしときますか。はい、でえ、前の子はfn引く1ですね。
で、その前の子はfnなんでまこれを呼び出して足してあげればいいと。はい で、ただこれだとえっと、再帰関数が止まらなくて、え、f0の時は0でf1の時は1なので、 
それをねえ、まあ、一分で追加しておきますと、はい、これで完成です。
じゃあ、これの計算
量について
ちょっと考えていきたいんですけど、え、計算量というか、あれですね。これが
再帰関数、
このガ数自体が何回呼び出されるのか、
ていうことについて考えていきたいと思います。じゃあ、例えばね、f5の時、5番目を求めてください。実際には011
23かな
でま3になるんですけど、f5を呼び出す時にfさんとf4が呼び出されますね。まずで、じゃあ、fさんを呼び出すときには f1とf2が呼び出されますとで、f1はまそのままでよくて、
f2は これをね。また、計算する時にf0とf1が呼び出されます。とで、
まじゃあこっちがいいんですけど、次にf4について考えると、まずf3とf2が呼び出されますで、f2はf0とf1を呼び出しておりて、 f3はf1とf2は呼び出しますねで、
f1はこのままで終わりでいいんですけど、f2はf0とf1をもう1回呼び出しますと まあ、図にするとこんな形になっててま大体回ぐらい出すことになります。
え、じゃあ、次にf6を呼び出す時にどうなるかっていうのをちょっと試したくて、 まずね、foはこのぐらいありますねf4をしなきゃいけないんで、ま、このぐらい増やす必要があると、
じゃ、これがf難な
f8f9って時にもうなんかね、計算呼び出しの回数がめちゃくちゃ増えるの
考えなくてもわかると思うんですけど、
これめちゃくちゃまあ、
ほぼ倍ぐらいになります。だから、大体2のn上ぐらいもっとちょっと厳密に え、計算すると、黄金比とかが出てきて、
めんどくさいんでやらないんですが、大体なんか、2のn上を超えないぐらいだと思ってもらえればよくて ま。現実的には多分f20とか25とか。今日プロやる上では
それぐらいが限界になるんじゃないかなと思います。じゃあ、これだとちょっとさすがにね。実用性がなさすぎるので、 え、計算量の改善をしていきたいんですけど、この図を見るとね。 
f3とか、f4がこう何回も許されてることがわかるんじゃないかなと思いて。
で、ここをね。2回呼び出されるのって無駄なので、1回呼び出されたら、そこをメモっていければ、 え、計算量の削減がすごくできると思うんですね。まあ、それを実際に実装してみましょう。 
まあ、なんか適当にメモっていう破裂を用意しといて、でま、まだそれが縫いされてない時は、まあ、マイナス1とか書くのしときますか。
やっといてでまかその中身をいじってくんですけど、 とか、数の最初にそれがえマイナス1じゃなかったら、そのメモを返してあげるっていうことをします。 
でね、f0f1の時はまあこのままで良くて、え、そうじゃない時は一旦ね。メモの中にfの引く1とaの引く2を
え足してあげて、
メモを返してあげる。はい、これで完成でじゃ、どのくらい計算量が削減できたのかなっていうと、 
ここの部分が消えるので、すごくえ減ったことがわかるかなと思います。はい、 じゃあ、今は再帰関数でやったんですけど、フォア分を使ってえ、やることもできると思う。
できるんじゃないかなという感じがして、じゃ、実際に実装していくと、まあええ 個のね配列を用意してあげて、1番目とえ1番目はまあ最初に書いてあげて、 え、フォアブをiが2から始めて、え、2の時は1個と
その1個前を足してあげたやつを計算してあげれば、よくて、これをファー分で回しますとでえ、最後に出てきたn番目が答えになります。 
はい、これで完成で、まあ、これはすごく簡単な問題だったので、こんな感じで解けました。 
で、じゃあ、本題に戻って同手計画法って何かっていう話なんですけど、まあ、
えっと、今やってもらった。このフィボナッチ数を求める問題っていうのが簡単なねえ、動的計画法の一種になります。 
今使ったアルゴリズムですね。このえー、i番目をメモして、 ちょっとね。次、例えば、i番目を計算する時に愛引く1番目と愛引く2番目を計算する必要があるんですけど、ま、これはね、あじめメモしておいて、
え、それを使ってね。2番目を求めていくっていうま、再帰関数でもフォア分でもね。トップダウン がアップかで違いはあるんですが、
同じことをしてるようにはなってますね。これがまあ、土的計画法の簡単なタスクで で、土手計画法じゃ何っていう話なんですけど、えま定義がね、一応もミキペディアによると、
え、動的計画法っていうのはね。今からいう2つの条件を満たしたもので、1つ目はね、なんかさて最期的なかんえ、関係を利用して問題を解くもの、 
これはどういうことかっていうと、なんか、えっと、1つの大きい問題があった時に、その部分問題の答えを使って計算していくもの ていう風に定義されてます。っていうのが、条件のえ1つで
ま、フィボナッチ数の例でいくと、あのn番目を求めたい時に、それより小さい絵の低い1番目とへの引く2番目のえ 答えをね、利用して求めることになってて、えの引く1番目とえ引く2番目を使う時も え
、それより小さい絵の引く3番目だったえの引く4番目の個体を使って求めてますね。
はい、これがえ動的計画法の条件の1つ目になりますで、条件の2つ目は とそれらのえ部分問題の答えをえメモして、計算量削減というか、え、 
無駄な計算を省くっていうのが、同体計画法のえ、条件の2つ目になります。これについては、まあメモ
ていう配列にもしてるのが、まあそのままそういうことでえ、再帰関数でやるんだったら、 まあ最初にねえ。そのなかでも示したように、
この無駄な計算っていうのがすごくあるので、これをメモしてえ、計算量を 無駄な計算をえ、省いていくっていうのがえ、それに当たります。で、この2つの条件を満たすアルゴリズムを
えまとめて、動的計画法と呼んでるということになります。
はいまど的計画法がどんなものかっていうのについての説明はえ以上なんですけど、 じゃあね。実際にキプロで動的計画法を使って問題を解きます。
ってな時に、なんか じゃ、どうやってその統的計画を思いつくのとか、どうやって勉強していけばいいの。みたいな話になってくると思うんですけど、これについてはま、結論言うと
え問題を解くしかないです。はいまささん言ってるように、その動的計画法っていうのは、あくまでもカテゴリ名でしかないので、 なんかね。
この問題、あ、このアルゴリズムを覚えれば解けるよっていうのはええなくて、なんかね、いろんな え。問題を問題によって、そのバリエーションがあるので、それに対応していく必要あるんですけど、
それだと、なんか、アルゴリズムを無限にえる必要があるんじゃないかって思うかもしれないんですが、 ま、そういうことではなくて、
まもちろんねと動的計画法の中でも典型問題って呼ばれてるまいわゆる え、品質な有名な問題がたくさんあるので、そういうのをね。勉強する必要はあるんですが、
と、基本的に今日プロやってて、出てくる問題って、結構こう典型問題をちょっとひねった問題だったり、 まあなんかなんだろうな。
結構、品質な問題のそのパターンみたいなのがあるので、そういうのが え、思いつけるようになると、魔動的変化の問題は解けるようになっていくんじゃないかなと思います。
はい、で、それについ典型問題については、結構典型問題をねまとめてるサイトとかがあったりするので、 まあでしく紹介するんですが、そういうのを参考に解いていければいいんじゃないかなと思います。
頭が真っ白になったえっと、
で、どうて計画
をどうやってついていくか、とけるようになるかっていう話なんですけど。
動的計画法をどうやって解けるようになるかっていう話なんですけど、えー、なんて言えばいいのかな。 
なんか、多分ビプロやってて経験あるんじゃないかなと思うんですけど、最初の方なんか
こう
簡単な問題しか解けなかったけど、やってるうちに、なんか問題のパターンが見えてくるみたいな ことがね。
まわりかしあるんじゃないかなと思ってて、例えばえなんだろうな。区間に関する問題だったら、なんか相当したら 見通しが良くなるとかと、
こういう問題は、なんか試しに数列を相当してみればいいんじゃないかとかとま、ちょっと。
まあ、まだもしかしたらピントは来ないかもしれないんですが、なんか、グラフアルゴリズムで、ま。この問題はなんかえ、 結局はなんかえこっからここまでのえ。
最短経路を求める問題だから、なんかちょっとこう。工夫して あげれば、最短経路問題のアルゴリズムを使って、ちょっと工夫すれば解けるんじゃないかみたいな、そういうのはね、結構今日プロ
ま、今日プロ以外にもね。数学だったり、そういうので結構あると思うんですけど、それと一緒で、どで、計画法もなんか典型をある程度知っといて、 
でやってると、なんかああ、もしかしたら、これはなんか数列に関する問題で、
合番目 の答えが分かってれば、iプラス1番目が出せるから、あ、じゃあどで計画法でいけるねみたいな、そういうのがね、結構えわかるようになってきます
はい、なので、やっぱそうなるためには、結局問題を解くしかないので、
ええ
まね問題を解いていければなと思います。はい え、じゃあ、ちょっと今日はえど的か計計画法のねえ、
まあ、なんか 典型問題を軽く紹介しつつま、その中から何問か解きつつみたいな感じで進めていきたいなと思います。
はいでえ、典型問題何やるかっていうとな問題と、 あーlis最大部分増加列かとあと と、最長共通分裂と
と、
なんかadpcにまとまってるやつを使えばいいかな。で、dpcのやつを解きつつかれ、代を出しつつ、 
スライドの構成としては、今のやつをやって、最後の方にえ、例題をのっけてく感じです そんな感じで、スライドの作成をよろしくお願いします。
